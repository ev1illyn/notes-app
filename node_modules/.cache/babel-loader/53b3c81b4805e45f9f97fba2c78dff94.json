{"ast":null,"code":"var _jsxFileName = \"/home/evillyn/prog-estudos/kanban/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport styled from 'styled-components';\nimport initialData from './initial-data';\nimport Column from \"./column\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport AddTask from './add-task';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n`;\n_c = Container;\nconst Cont = styled.div`\n`;\n_c2 = Cont;\nconst Header = styled.div`\n  width:100vw;\n  height:40px;\n  background-color:black;\n  opacity: 0.1;\n  font-family: 'Itim', cursive;\n  color:white;\n  font-size:30px;\n  text-align:center;\n`;\n_c3 = Header;\nconst Status = styled.div`\n  margin: 10px auto;\n  padding: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 5px;\n  width: 220px;\n  display: flex;\n  flex-direction: column;\n  font-family: 'Itim', cursive;\n  background-color:rgb(240, 240, 240);\n`;\n_c4 = Status;\nconst Footer = styled.h3`\n  margin: 10px auto;\n  padding: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 5px;\n  width: 220px;\n  display: flex;\n  flex-direction: column;\n  font-family: 'Itim', cursive;\n  background-color:rgb(240, 240, 240);\n`;\n_c5 = Footer;\n\nclass App extends React.Component {\n  //state = initialData;\n  // EDITADO\n  constructor(props) {\n    super(props); // Bind the this context to the handler function\n\n    this.position = 'You did not lifted any task.';\n\n    this.onDragStart = (start, provided) => {\n      provided.announce(`You have lifted the task in position: ${start.source.index + 1}.`);\n      this.position = `You are lifting the task in position: ${start.source.index + 1}`;\n      const homeIndex = this.state.columnOrder.indexOf(start.source.droppableId);\n      this.setState({\n        homeIndex\n      });\n    };\n\n    this.onDragUpdate = (update, provided) => {\n      const message = update.destination ? `You have moved the task to position ${update.destination.index + 1}.` : `You are currently not over a droppable area`;\n      this.position = message;\n      provided.announce(message);\n    };\n\n    this.onDragEnd = (result, provided) => {\n      const message = result.destination ? `You have moved the task from position ${result.source.index + 1} to ${result.destination.index + 1}.` : `The task has been returned to its starting position of.`;\n      this.position = message;\n      provided.announce(message);\n      this.setState({\n        homeIndex: null\n      });\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n      if (!destination) return;\n      if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n      const start = this.state.columns[source.droppableId];\n      const finish = this.state.columns[destination.droppableId];\n\n      if (start === finish) {\n        const newTaskIds = Array.from(start.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n        const newColumn = { ...start,\n          taskIds: newTaskIds\n        };\n        const newState = { ...this.state,\n          columns: { ...this.state.columns,\n            [newColumn.id]: newColumn\n          }\n        };\n        this.setState(newState);\n        return;\n      } // move task to another list\n\n\n      const startTaskIds = Array.from(start.taskIds);\n      startTaskIds.splice(source.index, 1);\n      const newStart = { ...start,\n        taskIds: startTaskIds\n      };\n      const finishTaskIds = Array.from(finish.taskIds);\n      finishTaskIds.splice(destination.index, 0, draggableId);\n      const newFinish = { ...finish,\n        taskIds: finishTaskIds\n      };\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      };\n      this.setState(newState);\n    };\n\n    this.addTask = task => {\n      let taskNumber = Object.keys(this.state.tasks).length;\n      let taskName = 'task-' + (taskNumber + 1);\n      const newTasksIds = Array.from(this.state.columns['column-1'].taskIds);\n      newTasksIds.push(taskName);\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          'column-1': { ...this.state.columns['column-1'],\n            taskIds: newTasksIds\n          }\n        },\n        tasks: { ...this.state.tasks,\n          [taskName]: {\n            id: taskName,\n            content: task\n          }\n        }\n      };\n      this.setState(newState); //console.log(newState);\n      //console.log(this.state);\n      //console.log('---------');\n      //adicionar tasks para as colunas, inserir de verdade na tela\n    };\n\n    this.removeTask = this.removeTask.bind(this); // Set some state\n\n    this.state = initialData;\n  } // This method will be sent to the child component\n\n\n  removeTask(taskId) {\n    console.log('handler remove');\n    /*this.setState({\n      messageShown: true\n    });*/\n  } // EDITADO  \n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Cont, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: \"NOTES APP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Status, {\n        children: this.position\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onBeforeDragStart: this.onBeforeDragStart,\n        onDragStart: this.onDragStart,\n        onDragUpdate: this.onDragUpdate,\n        onDragEnd: this.onDragEnd,\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: this.state.columnOrder.map((columnId, index) => {\n            let column = this.state.columns[columnId];\n            let tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n            let isDropDisabled = index < this.state.homeIndex;\n            return /*#__PURE__*/_jsxDEV(Column, {\n              column: column,\n              tasks: tasks,\n              taskList: this.state,\n              isDropDisabled: isDropDisabled,\n              state: this.state\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        children: /*#__PURE__*/_jsxDEV(AddTask, {\n          addTask: this.addTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 256,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Cont\");\n$RefreshReg$(_c3, \"Header\");\n$RefreshReg$(_c4, \"Status\");\n$RefreshReg$(_c5, \"Footer\");","map":{"version":3,"sources":["/home/evillyn/prog-estudos/kanban/src/index.js"],"names":["React","ReactDOM","styled","initialData","Column","DragDropContext","AddTask","Container","div","Cont","Header","Status","Footer","h3","App","Component","constructor","props","position","onDragStart","start","provided","announce","source","index","homeIndex","state","columnOrder","indexOf","droppableId","setState","onDragUpdate","update","message","destination","onDragEnd","result","draggableId","columns","finish","newTaskIds","Array","from","taskIds","splice","newColumn","newState","id","startTaskIds","newStart","finishTaskIds","newFinish","addTask","task","taskNumber","Object","keys","tasks","length","taskName","newTasksIds","push","content","removeTask","bind","taskId","console","log","render","onBeforeDragStart","map","columnId","column","isDropDisabled","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport styled from 'styled-components';\nimport initialData from './initial-data';\nimport Column from \"./column\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport AddTask from './add-task';\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nconst Cont = styled.div`\n`;\n\nconst Header = styled.div`\n  width:100vw;\n  height:40px;\n  background-color:black;\n  opacity: 0.1;\n  font-family: 'Itim', cursive;\n  color:white;\n  font-size:30px;\n  text-align:center;\n`;\n\nconst Status = styled.div`\n  margin: 10px auto;\n  padding: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 5px;\n  width: 220px;\n  display: flex;\n  flex-direction: column;\n  font-family: 'Itim', cursive;\n  background-color:rgb(240, 240, 240);\n`;\n\nconst Footer = styled.h3`\n  margin: 10px auto;\n  padding: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 5px;\n  width: 220px;\n  display: flex;\n  flex-direction: column;\n  font-family: 'Itim', cursive;\n  background-color:rgb(240, 240, 240);\n`;\n\nclass App extends React.Component {\n\n  //state = initialData;\n  position = 'You did not lifted any task.';\n\n  // EDITADO\n  constructor(props) {\n    super(props)\n\n    // Bind the this context to the handler function\n    this.removeTask = this.removeTask.bind(this);\n\n    // Set some state\n    this.state = initialData;\n  }\n\n  // This method will be sent to the child component\n  removeTask(taskId) {\n    console.log('handler remove');\n    /*this.setState({\n      messageShown: true\n    });*/\n  }\n  // EDITADO  \n\n  onDragStart = (start, provided) => {\n    provided.announce(\n      `You have lifted the task in position: ${start.source.index + 1}.`,\n    );\n    this.position = `You are lifting the task in position: ${start.source.index + 1}`;\n    const homeIndex = this.state.columnOrder.indexOf(start.source.droppableId);\n\n    this.setState({\n      homeIndex,\n    });\n  };\n\n  onDragUpdate = (update, provided) => {\n    const message = update.destination\n      ? `You have moved the task to position ${update.destination.index + 1}.`\n      : `You are currently not over a droppable area`;\n    this.position = message;\n    provided.announce(message);\n  }\n\n  onDragEnd = (result, provided) => {\n\n    const message = result.destination\n      ? `You have moved the task from position ${result.source.index + 1} to ${result.destination.index + 1}.`\n      : `The task has been returned to its starting position of.`;\n\n    this.position = message;\n    provided.announce(message);\n\n    this.setState({\n      homeIndex: null,\n    });\n\n    const { destination, source, draggableId } = result;\n\n    if (!destination) return;\n\n    if (destination.droppableId === source.droppableId &&\n      destination.index === source.index) return;\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n\n    if (start === finish) {\n\n      const newTaskIds = Array.from(start.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      const newColumn = {\n        ...start,\n        taskIds: newTaskIds,\n      };\n\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumn.id]: newColumn,\n        },\n      };\n\n      this.setState(newState);\n      return;\n\n    }\n\n    // move task to another list\n\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds,\n    };\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds,\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n    };\n    this.setState(newState);\n\n  };\n\n  addTask = (task) => {\n\n    let taskNumber = (Object.keys(this.state.tasks).length);\n    let taskName = 'task-' + (taskNumber + 1);\n\n\n    const newTasksIds = Array.from(this.state.columns['column-1'].taskIds);\n    newTasksIds.push(taskName);\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        'column-1': {\n          ...this.state.columns['column-1'],\n          taskIds: newTasksIds,\n        },\n      },\n      tasks: {\n        ...this.state.tasks,\n        [taskName]: {\n          id: taskName,\n          content: task\n        },\n      },\n    };\n\n    this.setState(newState);\n\n    //console.log(newState);\n    //console.log(this.state);\n    //console.log('---------');\n    //adicionar tasks para as colunas, inserir de verdade na tela\n  }\n\n  render() {\n\n\n    return (\n\n      <Cont>\n\n        <Header>NOTES APP</Header>\n        <Status>{this.position}</Status>\n\n        <DragDropContext onBeforeDragStart={this.onBeforeDragStart}\n          onDragStart={this.onDragStart}\n          onDragUpdate={this.onDragUpdate}\n          onDragEnd={this.onDragEnd}\n        >\n\n          <Container>\n            {this.state.columnOrder.map((columnId, index) => {\n\n              let column = this.state.columns[columnId];\n\n              let tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n\n              let isDropDisabled = index < this.state.homeIndex;\n\n              return <Column key={column.id} column={column} tasks={tasks}\n                taskList={this.state}\n                isDropDisabled={isDropDisabled}\n\n                state={this.state} />;\n\n            })}\n          </Container>\n\n        </DragDropContext>\n\n        <Footer>\n          <AddTask addTask={this.addTask}></AddTask>\n        </Footer>\n\n      </Cont>\n\n    );\n\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"]},"metadata":{},"sourceType":"module"}