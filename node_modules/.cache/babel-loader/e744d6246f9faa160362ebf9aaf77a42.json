{"ast":null,"code":"var _jsxFileName = \"/home/evillyn/prog-estudos/kanban/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport styled from 'styled-components';\nimport initialData from './initial-data';\nimport Column from \"./column\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n`;\n_c = Container;\nconst Cont = styled.div`\n`;\n_c2 = Cont;\nconst Msg = styled.div`\n  margin: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  min-width: 220px;\n  font-family: 'Itim', cursive;\n`;\n_c3 = Msg;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialData;\n    this.position = 'Você não moveu nenhuma nota.';\n    this.isDropDisabled = false;\n\n    this.onDragStart = (start, provided) => {\n      provided.announce(`Você moveu a tarefa de posição: ${start.source.index + 1}.`);\n      this.position = `Você está movendo a tarefa de posição: ${start.source.index + 1}`;\n      const homeIndex = this.state.columnOrder.indexOf(start.source.droppableId);\n      this.setState({\n        homeIndex\n      });\n    };\n\n    this.onDragUpdate = (update, provided) => {\n      const message = update.destination ? `Você moveu a tarefa para a posição ${update.destination.index + 1}.` : `Essa não é uma área para mover a tarefa.`;\n      this.position = message;\n      provided.announce(message);\n    };\n\n    this.onDragEnd = (result, provided) => {\n      const message = result.destination ? `Você moveu a tarefa de posição ${result.source.index + 1} para a posição ${result.destination.index + 1}.` : `A tarefa foi movida para sua posição inicial.`;\n      this.position = message;\n      provided.announce(message);\n      this.setState({\n        homeIndex: null\n      });\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n      if (!destination) return;\n      if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n      const start = this.state.columns[source.droppableId];\n      const finish = this.state.columns[destination.droppableId];\n\n      if (start === finish) {\n        const newTaskIds = Array.from(start.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n        const newColumn = { ...start,\n          taskIds: newTaskIds\n        };\n        const newState = { ...this.state,\n          columns: { ...this.state.columns,\n            [newColumn.id]: newColumn\n          }\n        };\n        this.setState(newState);\n        return;\n      } // move task to another list\n\n\n      const startTaskIds = Array.from(start.taskIds);\n      startTaskIds.splice(source.index, 1);\n      const newStart = { ...start,\n        taskIds: startTaskIds\n      };\n      const finishTaskIds = Array.from(finish.taskIds);\n      finishTaskIds.splice(destination.index, 0, draggableId);\n      const newFinish = { ...finish,\n        taskIds: finishTaskIds\n      };\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      };\n      this.setState(newState);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Cont, {\n      children: [/*#__PURE__*/_jsxDEV(Msg, {\n        children: this.position\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onBeforeDragStart: this.onBeforeDragStart,\n        onDragStart: this.onDragStart,\n        onDragUpdate: this.onDragUpdate,\n        onDragEnd: this.onDragEnd,\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: this.state.columnOrder.map((columnId, index) => {\n            const column = this.state.columns[columnId];\n            const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n            this.isDropDisabled = index < this.state.homeIndex;\n            if (this.isDropDisabled) this.message = 'Você não pode retornar a nota.';\n            return /*#__PURE__*/_jsxDEV(Column, {\n              column: column,\n              tasks: tasks,\n              isDropDisabled: isDropDisabled\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 155,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Cont\");\n$RefreshReg$(_c3, \"Msg\");","map":{"version":3,"sources":["/home/evillyn/prog-estudos/kanban/src/index.js"],"names":["React","ReactDOM","styled","initialData","Column","DragDropContext","Container","div","Cont","Msg","App","Component","state","position","isDropDisabled","onDragStart","start","provided","announce","source","index","homeIndex","columnOrder","indexOf","droppableId","setState","onDragUpdate","update","message","destination","onDragEnd","result","draggableId","columns","finish","newTaskIds","Array","from","taskIds","splice","newColumn","newState","id","startTaskIds","newStart","finishTaskIds","newFinish","render","onBeforeDragStart","map","columnId","column","tasks","taskId","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport styled from 'styled-components';\nimport initialData from './initial-data';\nimport Column from \"./column\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nconst Container = styled.div`\n  display: flex;\n`;\nconst Cont = styled.div`\n`;\nconst Msg = styled.div`\n  margin: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  min-width: 220px;\n  font-family: 'Itim', cursive;\n`;\n\nclass App extends React.Component {\n\n  state = initialData;\n  position = 'Você não moveu nenhuma nota.';\n  isDropDisabled = false;\n\n  onDragStart = (start, provided) => {\n    provided.announce(\n      `Você moveu a tarefa de posição: ${start.source.index + 1}.`,\n    );\n    this.position = `Você está movendo a tarefa de posição: ${start.source.index + 1}`;\n    const homeIndex = this.state.columnOrder.indexOf(start.source.droppableId);\n\n    this.setState({\n      homeIndex,\n    });\n  };\n\n  onDragUpdate = (update, provided) => {\n    const message = update.destination\n      ? `Você moveu a tarefa para a posição ${update.destination.index + 1}.`\n      : `Essa não é uma área para mover a tarefa.`;\n    this.position = message;\n    provided.announce(message);\n  }\n\n  onDragEnd = (result, provided) => {\n\n    const message = result.destination\n      ? `Você moveu a tarefa de posição ${result.source.index + 1} para a posição ${result.destination.index + 1}.`\n      : `A tarefa foi movida para sua posição inicial.`;\n\n    this.position = message;\n    provided.announce(message);\n\n    this.setState({\n      homeIndex: null,\n    });\n\n    const { destination, source, draggableId } = result;\n\n    if (!destination) return;\n\n    if (destination.droppableId === source.droppableId &&\n      destination.index === source.index) return;\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n\n    if (start === finish) {\n\n      const newTaskIds = Array.from(start.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      const newColumn = {\n        ...start,\n        taskIds: newTaskIds,\n      };\n\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumn.id]: newColumn,\n        },\n      };\n\n      this.setState(newState);\n      return;\n\n    }\n\n    // move task to another list\n\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds,\n    };\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds,\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n    };\n    this.setState(newState);\n\n  };\n\n  render() {\n    return (\n\n      <Cont>\n        <Msg>{this.position}</Msg>\n        <DragDropContext onBeforeDragStart={this.onBeforeDragStart}\n          onDragStart={this.onDragStart}\n          onDragUpdate={this.onDragUpdate}\n          onDragEnd={this.onDragEnd}\n        >\n          <Container>\n            {this.state.columnOrder.map((columnId, index) => {\n\n              const column = this.state.columns[columnId];\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n\n              this.isDropDisabled = index < this.state.homeIndex;\n\n              if (this.isDropDisabled) this.message = 'Você não pode retornar a nota.';\n\n              return <Column key={column.id} column={column} tasks={tasks} isDropDisabled={isDropDisabled} />;\n\n            })}\n          </Container>\n        </DragDropContext>\n      </Cont>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"]},"metadata":{},"sourceType":"module"}