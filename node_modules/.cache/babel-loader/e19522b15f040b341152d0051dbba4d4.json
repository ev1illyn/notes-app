{"ast":null,"code":"var _jsxFileName = \"/home/evillyn/prog-estudos/kanban/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport styled from 'styled-components';\nimport initialData from './initial-data';\nimport Column from \"./column\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n`;\n_c = Container;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialData;\n\n    this.onDragStart = (start, provided) => {\n      provided.announce(`Você moveu a tarefa de posição: ${start.source.index}`);\n      const homeIndex = this.state.columnOrder.indexOf(start.source.droppableId);\n      this.setState({\n        homeIndex\n      });\n    };\n\n    this.onDragUpdate = start => {};\n\n    this.onDragEnd = result => {\n      this.setState({\n        homeIndex: null\n      });\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n      if (!destination) return;\n      if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n      const start = this.state.columns[source.droppableId];\n      const finish = this.state.columns[destination.droppableId];\n\n      if (start === finish) {\n        const newTaskIds = Array.from(start.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n        const newColumn = { ...start,\n          taskIds: newTaskIds\n        };\n        const newState = { ...this.state,\n          columns: { ...this.state.columns,\n            [newColumn.id]: newColumn\n          }\n        };\n        this.setState(newState);\n        return;\n      } // move task to another list\n\n\n      const startTaskIds = Array.from(start.taskIds);\n      startTaskIds.splice(source.index, 1);\n      const newStart = { ...start,\n        taskIds: startTaskIds\n      };\n      const finishTaskIds = Array.from(finish.taskIds);\n      finishTaskIds.splice(destination.index, 0, draggableId);\n      const newFinish = { ...finish,\n        taskIds: finishTaskIds\n      };\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      };\n      this.setState(newState);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragStart: this.onDragStart,\n      onDragUpdate: this.onDragUpdate,\n      onDragEnd: this.onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: this.state.columnOrder.map((columnId, index) => {\n          const column = this.state.columns[columnId];\n          const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n          const isDropDisabled = index < this.state.homeIndex;\n          return /*#__PURE__*/_jsxDEV(Column, {\n            column: column,\n            tasks: tasks,\n            isDropDisabled: isDropDisabled\n          }, column.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 126,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["/home/evillyn/prog-estudos/kanban/src/index.js"],"names":["React","ReactDOM","styled","initialData","Column","DragDropContext","Container","div","App","Component","state","onDragStart","start","provided","announce","source","index","homeIndex","columnOrder","indexOf","droppableId","setState","onDragUpdate","onDragEnd","result","destination","draggableId","columns","finish","newTaskIds","Array","from","taskIds","splice","newColumn","newState","id","startTaskIds","newStart","finishTaskIds","newFinish","render","map","columnId","column","tasks","taskId","isDropDisabled","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport styled from 'styled-components';\nimport initialData from './initial-data';\nimport Column from \"./column\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nclass App extends React.Component {\n\n  state = initialData;\n\n  onDragStart = (start, provided) => {\n    provided.announce(`Você moveu a tarefa de posição: ${start.source.index}`,\n    );\n    const homeIndex = this.state.columnOrder.indexOf(start.source.droppableId);\n\n    this.setState({\n      homeIndex,\n    });\n  };\n\n  onDragUpdate = start => {\n\n  }\n\n  onDragEnd = result => {\n\n    this.setState({\n      homeIndex: null,\n    });\n\n    const { destination, source, draggableId } = result;\n\n    if (!destination) return;\n\n    if (destination.droppableId === source.droppableId &&\n      destination.index === source.index) return;\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n\n    if (start === finish) {\n\n      const newTaskIds = Array.from(start.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      const newColumn = {\n        ...start,\n        taskIds: newTaskIds,\n      };\n\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumn.id]: newColumn,\n        },\n      };\n\n      this.setState(newState);\n      return;\n\n    }\n\n    // move task to another list\n\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds,\n    };\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds,\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n    };\n    this.setState(newState);\n\n  };\n\n  render() {\n    return (\n\n      <DragDropContext\n        onDragStart={this.onDragStart}\n        onDragUpdate={this.onDragUpdate}\n        onDragEnd={this.onDragEnd}\n      >\n        <Container>\n          {this.state.columnOrder.map((columnId, index) => {\n\n            const column = this.state.columns[columnId];\n            const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n\n            const isDropDisabled = index < this.state.homeIndex;\n\n            return <Column key={column.id} column={column} tasks={tasks} isDropDisabled={isDropDisabled} />;\n\n          })}\n        </Container>\n      </DragDropContext>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"]},"metadata":{},"sourceType":"module"}